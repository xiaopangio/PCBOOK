// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: laptap_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaptapServiceClient is the client API for LaptapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaptapServiceClient interface {
	CreateLaptap(ctx context.Context, in *CreateLaptapRequest, opts ...grpc.CallOption) (*CreateLaptapResponse, error)
	SearchLaptap(ctx context.Context, in *SearchLaptapRequest, opts ...grpc.CallOption) (LaptapService_SearchLaptapClient, error)
	UploadImage(ctx context.Context, opts ...grpc.CallOption) (LaptapService_UploadImageClient, error)
	RateLaptap(ctx context.Context, opts ...grpc.CallOption) (LaptapService_RateLaptapClient, error)
}

type laptapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLaptapServiceClient(cc grpc.ClientConnInterface) LaptapServiceClient {
	return &laptapServiceClient{cc}
}

func (c *laptapServiceClient) CreateLaptap(ctx context.Context, in *CreateLaptapRequest, opts ...grpc.CallOption) (*CreateLaptapResponse, error) {
	out := new(CreateLaptapResponse)
	err := c.cc.Invoke(ctx, "/techschool.pcbook.LaptapService/CreateLaptap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *laptapServiceClient) SearchLaptap(ctx context.Context, in *SearchLaptapRequest, opts ...grpc.CallOption) (LaptapService_SearchLaptapClient, error) {
	stream, err := c.cc.NewStream(ctx, &LaptapService_ServiceDesc.Streams[0], "/techschool.pcbook.LaptapService/SearchLaptap", opts...)
	if err != nil {
		return nil, err
	}
	x := &laptapServiceSearchLaptapClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type LaptapService_SearchLaptapClient interface {
	Recv() (*SearchLaptapResponse, error)
	grpc.ClientStream
}

type laptapServiceSearchLaptapClient struct {
	grpc.ClientStream
}

func (x *laptapServiceSearchLaptapClient) Recv() (*SearchLaptapResponse, error) {
	m := new(SearchLaptapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *laptapServiceClient) UploadImage(ctx context.Context, opts ...grpc.CallOption) (LaptapService_UploadImageClient, error) {
	stream, err := c.cc.NewStream(ctx, &LaptapService_ServiceDesc.Streams[1], "/techschool.pcbook.LaptapService/UploadImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &laptapServiceUploadImageClient{stream}
	return x, nil
}

type LaptapService_UploadImageClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type laptapServiceUploadImageClient struct {
	grpc.ClientStream
}

func (x *laptapServiceUploadImageClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *laptapServiceUploadImageClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *laptapServiceClient) RateLaptap(ctx context.Context, opts ...grpc.CallOption) (LaptapService_RateLaptapClient, error) {
	stream, err := c.cc.NewStream(ctx, &LaptapService_ServiceDesc.Streams[2], "/techschool.pcbook.LaptapService/RateLaptap", opts...)
	if err != nil {
		return nil, err
	}
	x := &laptapServiceRateLaptapClient{stream}
	return x, nil
}

type LaptapService_RateLaptapClient interface {
	Send(*RateLaptapRequest) error
	Recv() (*RateLaptapResponse, error)
	grpc.ClientStream
}

type laptapServiceRateLaptapClient struct {
	grpc.ClientStream
}

func (x *laptapServiceRateLaptapClient) Send(m *RateLaptapRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *laptapServiceRateLaptapClient) Recv() (*RateLaptapResponse, error) {
	m := new(RateLaptapResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LaptapServiceServer is the server API for LaptapService service.
// All implementations must embed UnimplementedLaptapServiceServer
// for forward compatibility
type LaptapServiceServer interface {
	CreateLaptap(context.Context, *CreateLaptapRequest) (*CreateLaptapResponse, error)
	SearchLaptap(*SearchLaptapRequest, LaptapService_SearchLaptapServer) error
	UploadImage(LaptapService_UploadImageServer) error
	RateLaptap(LaptapService_RateLaptapServer) error
	mustEmbedUnimplementedLaptapServiceServer()
}

// UnimplementedLaptapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLaptapServiceServer struct {
}

func (UnimplementedLaptapServiceServer) CreateLaptap(context.Context, *CreateLaptapRequest) (*CreateLaptapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaptap not implemented")
}
func (UnimplementedLaptapServiceServer) SearchLaptap(*SearchLaptapRequest, LaptapService_SearchLaptapServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchLaptap not implemented")
}
func (UnimplementedLaptapServiceServer) UploadImage(LaptapService_UploadImageServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedLaptapServiceServer) RateLaptap(LaptapService_RateLaptapServer) error {
	return status.Errorf(codes.Unimplemented, "method RateLaptap not implemented")
}
func (UnimplementedLaptapServiceServer) mustEmbedUnimplementedLaptapServiceServer() {}

// UnsafeLaptapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaptapServiceServer will
// result in compilation errors.
type UnsafeLaptapServiceServer interface {
	mustEmbedUnimplementedLaptapServiceServer()
}

func RegisterLaptapServiceServer(s grpc.ServiceRegistrar, srv LaptapServiceServer) {
	s.RegisterService(&LaptapService_ServiceDesc, srv)
}

func _LaptapService_CreateLaptap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLaptapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptapServiceServer).CreateLaptap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/techschool.pcbook.LaptapService/CreateLaptap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptapServiceServer).CreateLaptap(ctx, req.(*CreateLaptapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LaptapService_SearchLaptap_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchLaptapRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LaptapServiceServer).SearchLaptap(m, &laptapServiceSearchLaptapServer{stream})
}

type LaptapService_SearchLaptapServer interface {
	Send(*SearchLaptapResponse) error
	grpc.ServerStream
}

type laptapServiceSearchLaptapServer struct {
	grpc.ServerStream
}

func (x *laptapServiceSearchLaptapServer) Send(m *SearchLaptapResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _LaptapService_UploadImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LaptapServiceServer).UploadImage(&laptapServiceUploadImageServer{stream})
}

type LaptapService_UploadImageServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type laptapServiceUploadImageServer struct {
	grpc.ServerStream
}

func (x *laptapServiceUploadImageServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *laptapServiceUploadImageServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _LaptapService_RateLaptap_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LaptapServiceServer).RateLaptap(&laptapServiceRateLaptapServer{stream})
}

type LaptapService_RateLaptapServer interface {
	Send(*RateLaptapResponse) error
	Recv() (*RateLaptapRequest, error)
	grpc.ServerStream
}

type laptapServiceRateLaptapServer struct {
	grpc.ServerStream
}

func (x *laptapServiceRateLaptapServer) Send(m *RateLaptapResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *laptapServiceRateLaptapServer) Recv() (*RateLaptapRequest, error) {
	m := new(RateLaptapRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LaptapService_ServiceDesc is the grpc.ServiceDesc for LaptapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaptapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "techschool.pcbook.LaptapService",
	HandlerType: (*LaptapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLaptap",
			Handler:    _LaptapService_CreateLaptap_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchLaptap",
			Handler:       _LaptapService_SearchLaptap_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadImage",
			Handler:       _LaptapService_UploadImage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "RateLaptap",
			Handler:       _LaptapService_RateLaptap_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "laptap_service.proto",
}

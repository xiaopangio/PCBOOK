// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newLaptapStorage(db *gorm.DB, opts ...gen.DOOption) laptapStorage {
	_laptapStorage := laptapStorage{}

	_laptapStorage.laptapStorageDo.UseDB(db, opts...)
	_laptapStorage.laptapStorageDo.UseModel(&model.LaptapStorage{})

	tableName := _laptapStorage.laptapStorageDo.TableName()
	_laptapStorage.ALL = field.NewAsterisk(tableName)
	_laptapStorage.LaptapID = field.NewString(tableName, "laptap_id")
	_laptapStorage.StorageID = field.NewInt32(tableName, "storage_id")
	_laptapStorage.Storage = laptapStorageHasOneStorage{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Storage", "model.Storage"),
		Driver: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Storage.Driver", "model.StorageDriver"),
		},
		Memory: struct {
			field.RelationField
			Unit struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Storage.Memory", "model.Memory"),
			Unit: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Storage.Memory.Unit", "model.MemoryUnit"),
			},
		},
	}

	_laptapStorage.fillFieldMap()

	return _laptapStorage
}

type laptapStorage struct {
	laptapStorageDo

	ALL       field.Asterisk
	LaptapID  field.String
	StorageID field.Int32
	Storage   laptapStorageHasOneStorage

	fieldMap map[string]field.Expr
}

func (l laptapStorage) Table(newTableName string) *laptapStorage {
	l.laptapStorageDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l laptapStorage) As(alias string) *laptapStorage {
	l.laptapStorageDo.DO = *(l.laptapStorageDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *laptapStorage) updateTableName(table string) *laptapStorage {
	l.ALL = field.NewAsterisk(table)
	l.LaptapID = field.NewString(table, "laptap_id")
	l.StorageID = field.NewInt32(table, "storage_id")

	l.fillFieldMap()

	return l
}

func (l *laptapStorage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *laptapStorage) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 3)
	l.fieldMap["laptap_id"] = l.LaptapID
	l.fieldMap["storage_id"] = l.StorageID

}

func (l laptapStorage) clone(db *gorm.DB) laptapStorage {
	l.laptapStorageDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l laptapStorage) replaceDB(db *gorm.DB) laptapStorage {
	l.laptapStorageDo.ReplaceDB(db)
	return l
}

type laptapStorageHasOneStorage struct {
	db *gorm.DB

	field.RelationField

	Driver struct {
		field.RelationField
	}
	Memory struct {
		field.RelationField
		Unit struct {
			field.RelationField
		}
	}
}

func (a laptapStorageHasOneStorage) Where(conds ...field.Expr) *laptapStorageHasOneStorage {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laptapStorageHasOneStorage) WithContext(ctx context.Context) *laptapStorageHasOneStorage {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laptapStorageHasOneStorage) Model(m *model.LaptapStorage) *laptapStorageHasOneStorageTx {
	return &laptapStorageHasOneStorageTx{a.db.Model(m).Association(a.Name())}
}

type laptapStorageHasOneStorageTx struct{ tx *gorm.Association }

func (a laptapStorageHasOneStorageTx) Find() (result *model.Storage, err error) {
	return result, a.tx.Find(&result)
}

func (a laptapStorageHasOneStorageTx) Append(values ...*model.Storage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laptapStorageHasOneStorageTx) Replace(values ...*model.Storage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laptapStorageHasOneStorageTx) Delete(values ...*model.Storage) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laptapStorageHasOneStorageTx) Clear() error {
	return a.tx.Clear()
}

func (a laptapStorageHasOneStorageTx) Count() int64 {
	return a.tx.Count()
}

type laptapStorageDo struct{ gen.DO }

func (l laptapStorageDo) Debug() *laptapStorageDo {
	return l.withDO(l.DO.Debug())
}

func (l laptapStorageDo) WithContext(ctx context.Context) *laptapStorageDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l laptapStorageDo) ReadDB() *laptapStorageDo {
	return l.Clauses(dbresolver.Read)
}

func (l laptapStorageDo) WriteDB() *laptapStorageDo {
	return l.Clauses(dbresolver.Write)
}

func (l laptapStorageDo) Session(config *gorm.Session) *laptapStorageDo {
	return l.withDO(l.DO.Session(config))
}

func (l laptapStorageDo) Clauses(conds ...clause.Expression) *laptapStorageDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l laptapStorageDo) Returning(value interface{}, columns ...string) *laptapStorageDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l laptapStorageDo) Not(conds ...gen.Condition) *laptapStorageDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l laptapStorageDo) Or(conds ...gen.Condition) *laptapStorageDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l laptapStorageDo) Select(conds ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l laptapStorageDo) Where(conds ...gen.Condition) *laptapStorageDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l laptapStorageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *laptapStorageDo {
	return l.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (l laptapStorageDo) Order(conds ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l laptapStorageDo) Distinct(cols ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l laptapStorageDo) Omit(cols ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l laptapStorageDo) Join(table schema.Tabler, on ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l laptapStorageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l laptapStorageDo) RightJoin(table schema.Tabler, on ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l laptapStorageDo) Group(cols ...field.Expr) *laptapStorageDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l laptapStorageDo) Having(conds ...gen.Condition) *laptapStorageDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l laptapStorageDo) Limit(limit int) *laptapStorageDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l laptapStorageDo) Offset(offset int) *laptapStorageDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l laptapStorageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *laptapStorageDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l laptapStorageDo) Unscoped() *laptapStorageDo {
	return l.withDO(l.DO.Unscoped())
}

func (l laptapStorageDo) Create(values ...*model.LaptapStorage) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l laptapStorageDo) CreateInBatches(values []*model.LaptapStorage, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l laptapStorageDo) Save(values ...*model.LaptapStorage) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l laptapStorageDo) First() (*model.LaptapStorage, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaptapStorage), nil
	}
}

func (l laptapStorageDo) Take() (*model.LaptapStorage, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaptapStorage), nil
	}
}

func (l laptapStorageDo) Last() (*model.LaptapStorage, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaptapStorage), nil
	}
}

func (l laptapStorageDo) Find() ([]*model.LaptapStorage, error) {
	result, err := l.DO.Find()
	return result.([]*model.LaptapStorage), err
}

func (l laptapStorageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LaptapStorage, err error) {
	buf := make([]*model.LaptapStorage, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l laptapStorageDo) FindInBatches(result *[]*model.LaptapStorage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l laptapStorageDo) Attrs(attrs ...field.AssignExpr) *laptapStorageDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l laptapStorageDo) Assign(attrs ...field.AssignExpr) *laptapStorageDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l laptapStorageDo) Joins(fields ...field.RelationField) *laptapStorageDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l laptapStorageDo) Preload(fields ...field.RelationField) *laptapStorageDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l laptapStorageDo) FirstOrInit() (*model.LaptapStorage, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaptapStorage), nil
	}
}

func (l laptapStorageDo) FirstOrCreate() (*model.LaptapStorage, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LaptapStorage), nil
	}
}

func (l laptapStorageDo) FindByPage(offset int, limit int) (result []*model.LaptapStorage, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l laptapStorageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l laptapStorageDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l laptapStorageDo) Delete(models ...*model.LaptapStorage) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *laptapStorageDo) withDO(do gen.Dao) *laptapStorageDo {
	l.DO = *do.(*gen.DO)
	return l
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newScreenResolution(db *gorm.DB, opts ...gen.DOOption) screenResolution {
	_screenResolution := screenResolution{}

	_screenResolution.screenResolutionDo.UseDB(db, opts...)
	_screenResolution.screenResolutionDo.UseModel(&model.ScreenResolution{})

	tableName := _screenResolution.screenResolutionDo.TableName()
	_screenResolution.ALL = field.NewAsterisk(tableName)
	_screenResolution.ScreenResolutionID = field.NewInt32(tableName, "screen_resolution_id")
	_screenResolution.Width = field.NewInt32(tableName, "width")
	_screenResolution.Height = field.NewInt32(tableName, "height")

	_screenResolution.fillFieldMap()

	return _screenResolution
}

type screenResolution struct {
	screenResolutionDo

	ALL                field.Asterisk
	ScreenResolutionID field.Int32
	Width              field.Int32
	Height             field.Int32

	fieldMap map[string]field.Expr
}

func (s screenResolution) Table(newTableName string) *screenResolution {
	s.screenResolutionDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s screenResolution) As(alias string) *screenResolution {
	s.screenResolutionDo.DO = *(s.screenResolutionDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *screenResolution) updateTableName(table string) *screenResolution {
	s.ALL = field.NewAsterisk(table)
	s.ScreenResolutionID = field.NewInt32(table, "screen_resolution_id")
	s.Width = field.NewInt32(table, "width")
	s.Height = field.NewInt32(table, "height")

	s.fillFieldMap()

	return s
}

func (s *screenResolution) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *screenResolution) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 3)
	s.fieldMap["screen_resolution_id"] = s.ScreenResolutionID
	s.fieldMap["width"] = s.Width
	s.fieldMap["height"] = s.Height
}

func (s screenResolution) clone(db *gorm.DB) screenResolution {
	s.screenResolutionDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s screenResolution) replaceDB(db *gorm.DB) screenResolution {
	s.screenResolutionDo.ReplaceDB(db)
	return s
}

type screenResolutionDo struct{ gen.DO }

func (s screenResolutionDo) Debug() *screenResolutionDo {
	return s.withDO(s.DO.Debug())
}

func (s screenResolutionDo) WithContext(ctx context.Context) *screenResolutionDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s screenResolutionDo) ReadDB() *screenResolutionDo {
	return s.Clauses(dbresolver.Read)
}

func (s screenResolutionDo) WriteDB() *screenResolutionDo {
	return s.Clauses(dbresolver.Write)
}

func (s screenResolutionDo) Session(config *gorm.Session) *screenResolutionDo {
	return s.withDO(s.DO.Session(config))
}

func (s screenResolutionDo) Clauses(conds ...clause.Expression) *screenResolutionDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s screenResolutionDo) Returning(value interface{}, columns ...string) *screenResolutionDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s screenResolutionDo) Not(conds ...gen.Condition) *screenResolutionDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s screenResolutionDo) Or(conds ...gen.Condition) *screenResolutionDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s screenResolutionDo) Select(conds ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s screenResolutionDo) Where(conds ...gen.Condition) *screenResolutionDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s screenResolutionDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *screenResolutionDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s screenResolutionDo) Order(conds ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s screenResolutionDo) Distinct(cols ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s screenResolutionDo) Omit(cols ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s screenResolutionDo) Join(table schema.Tabler, on ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s screenResolutionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s screenResolutionDo) RightJoin(table schema.Tabler, on ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s screenResolutionDo) Group(cols ...field.Expr) *screenResolutionDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s screenResolutionDo) Having(conds ...gen.Condition) *screenResolutionDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s screenResolutionDo) Limit(limit int) *screenResolutionDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s screenResolutionDo) Offset(offset int) *screenResolutionDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s screenResolutionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *screenResolutionDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s screenResolutionDo) Unscoped() *screenResolutionDo {
	return s.withDO(s.DO.Unscoped())
}

func (s screenResolutionDo) Create(values ...*model.ScreenResolution) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s screenResolutionDo) CreateInBatches(values []*model.ScreenResolution, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s screenResolutionDo) Save(values ...*model.ScreenResolution) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s screenResolutionDo) First() (*model.ScreenResolution, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenResolution), nil
	}
}

func (s screenResolutionDo) Take() (*model.ScreenResolution, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenResolution), nil
	}
}

func (s screenResolutionDo) Last() (*model.ScreenResolution, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenResolution), nil
	}
}

func (s screenResolutionDo) Find() ([]*model.ScreenResolution, error) {
	result, err := s.DO.Find()
	return result.([]*model.ScreenResolution), err
}

func (s screenResolutionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ScreenResolution, err error) {
	buf := make([]*model.ScreenResolution, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s screenResolutionDo) FindInBatches(result *[]*model.ScreenResolution, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s screenResolutionDo) Attrs(attrs ...field.AssignExpr) *screenResolutionDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s screenResolutionDo) Assign(attrs ...field.AssignExpr) *screenResolutionDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s screenResolutionDo) Joins(fields ...field.RelationField) *screenResolutionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s screenResolutionDo) Preload(fields ...field.RelationField) *screenResolutionDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s screenResolutionDo) FirstOrInit() (*model.ScreenResolution, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenResolution), nil
	}
}

func (s screenResolutionDo) FirstOrCreate() (*model.ScreenResolution, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ScreenResolution), nil
	}
}

func (s screenResolutionDo) FindByPage(offset int, limit int) (result []*model.ScreenResolution, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s screenResolutionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s screenResolutionDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s screenResolutionDo) Delete(models ...*model.ScreenResolution) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *screenResolutionDo) withDO(do gen.Dao) *screenResolutionDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newGpu(db *gorm.DB, opts ...gen.DOOption) gpu {
	_gpu := gpu{}

	_gpu.gpuDo.UseDB(db, opts...)
	_gpu.gpuDo.UseModel(&model.Gpu{})

	tableName := _gpu.gpuDo.TableName()
	_gpu.ALL = field.NewAsterisk(tableName)
	_gpu.GpuID = field.NewInt32(tableName, "gpu_id")
	_gpu.Brand = field.NewString(tableName, "brand")
	_gpu.Name = field.NewString(tableName, "name")
	_gpu.MinGhz = field.NewFloat32(tableName, "min_ghz")
	_gpu.MaxGhz = field.NewFloat32(tableName, "max_ghz")
	_gpu.MemoryID = field.NewInt32(tableName, "memory_id")

	_gpu.fillFieldMap()

	return _gpu
}

type gpu struct {
	gpuDo

	ALL      field.Asterisk
	GpuID    field.Int32
	Brand    field.String
	Name     field.String
	MinGhz   field.Float32
	MaxGhz   field.Float32
	MemoryID field.Int32

	fieldMap map[string]field.Expr
}

func (g gpu) Table(newTableName string) *gpu {
	g.gpuDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g gpu) As(alias string) *gpu {
	g.gpuDo.DO = *(g.gpuDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *gpu) updateTableName(table string) *gpu {
	g.ALL = field.NewAsterisk(table)
	g.GpuID = field.NewInt32(table, "gpu_id")
	g.Brand = field.NewString(table, "brand")
	g.Name = field.NewString(table, "name")
	g.MinGhz = field.NewFloat32(table, "min_ghz")
	g.MaxGhz = field.NewFloat32(table, "max_ghz")
	g.MemoryID = field.NewInt32(table, "memory_id")

	g.fillFieldMap()

	return g
}

func (g *gpu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *gpu) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 6)
	g.fieldMap["gpu_id"] = g.GpuID
	g.fieldMap["brand"] = g.Brand
	g.fieldMap["name"] = g.Name
	g.fieldMap["min_ghz"] = g.MinGhz
	g.fieldMap["max_ghz"] = g.MaxGhz
	g.fieldMap["memory_id"] = g.MemoryID
}

func (g gpu) clone(db *gorm.DB) gpu {
	g.gpuDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g gpu) replaceDB(db *gorm.DB) gpu {
	g.gpuDo.ReplaceDB(db)
	return g
}

type gpuDo struct{ gen.DO }

func (g gpuDo) Debug() *gpuDo {
	return g.withDO(g.DO.Debug())
}

func (g gpuDo) WithContext(ctx context.Context) *gpuDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g gpuDo) ReadDB() *gpuDo {
	return g.Clauses(dbresolver.Read)
}

func (g gpuDo) WriteDB() *gpuDo {
	return g.Clauses(dbresolver.Write)
}

func (g gpuDo) Session(config *gorm.Session) *gpuDo {
	return g.withDO(g.DO.Session(config))
}

func (g gpuDo) Clauses(conds ...clause.Expression) *gpuDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g gpuDo) Returning(value interface{}, columns ...string) *gpuDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g gpuDo) Not(conds ...gen.Condition) *gpuDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g gpuDo) Or(conds ...gen.Condition) *gpuDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g gpuDo) Select(conds ...field.Expr) *gpuDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g gpuDo) Where(conds ...gen.Condition) *gpuDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g gpuDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *gpuDo {
	return g.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (g gpuDo) Order(conds ...field.Expr) *gpuDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g gpuDo) Distinct(cols ...field.Expr) *gpuDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g gpuDo) Omit(cols ...field.Expr) *gpuDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g gpuDo) Join(table schema.Tabler, on ...field.Expr) *gpuDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g gpuDo) LeftJoin(table schema.Tabler, on ...field.Expr) *gpuDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g gpuDo) RightJoin(table schema.Tabler, on ...field.Expr) *gpuDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g gpuDo) Group(cols ...field.Expr) *gpuDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g gpuDo) Having(conds ...gen.Condition) *gpuDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g gpuDo) Limit(limit int) *gpuDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g gpuDo) Offset(offset int) *gpuDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g gpuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *gpuDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g gpuDo) Unscoped() *gpuDo {
	return g.withDO(g.DO.Unscoped())
}

func (g gpuDo) Create(values ...*model.Gpu) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g gpuDo) CreateInBatches(values []*model.Gpu, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g gpuDo) Save(values ...*model.Gpu) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g gpuDo) First() (*model.Gpu, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gpu), nil
	}
}

func (g gpuDo) Take() (*model.Gpu, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gpu), nil
	}
}

func (g gpuDo) Last() (*model.Gpu, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gpu), nil
	}
}

func (g gpuDo) Find() ([]*model.Gpu, error) {
	result, err := g.DO.Find()
	return result.([]*model.Gpu), err
}

func (g gpuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Gpu, err error) {
	buf := make([]*model.Gpu, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g gpuDo) FindInBatches(result *[]*model.Gpu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g gpuDo) Attrs(attrs ...field.AssignExpr) *gpuDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g gpuDo) Assign(attrs ...field.AssignExpr) *gpuDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g gpuDo) Joins(fields ...field.RelationField) *gpuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g gpuDo) Preload(fields ...field.RelationField) *gpuDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g gpuDo) FirstOrInit() (*model.Gpu, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gpu), nil
	}
}

func (g gpuDo) FirstOrCreate() (*model.Gpu, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Gpu), nil
	}
}

func (g gpuDo) FindByPage(offset int, limit int) (result []*model.Gpu, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g gpuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g gpuDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g gpuDo) Delete(models ...*model.Gpu) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *gpuDo) withDO(do gen.Dao) *gpuDo {
	g.DO = *do.(*gen.DO)
	return g
}

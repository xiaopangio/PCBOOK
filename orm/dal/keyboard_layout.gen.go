// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newKeyboardLayout(db *gorm.DB, opts ...gen.DOOption) keyboardLayout {
	_keyboardLayout := keyboardLayout{}

	_keyboardLayout.keyboardLayoutDo.UseDB(db, opts...)
	_keyboardLayout.keyboardLayoutDo.UseModel(&model.KeyboardLayout{})

	tableName := _keyboardLayout.keyboardLayoutDo.TableName()
	_keyboardLayout.ALL = field.NewAsterisk(tableName)
	_keyboardLayout.LayoutID = field.NewInt32(tableName, "layout_id")
	_keyboardLayout.Name = field.NewString(tableName, "name")

	_keyboardLayout.fillFieldMap()

	return _keyboardLayout
}

type keyboardLayout struct {
	keyboardLayoutDo

	ALL      field.Asterisk
	LayoutID field.Int32
	Name     field.String

	fieldMap map[string]field.Expr
}

func (k keyboardLayout) Table(newTableName string) *keyboardLayout {
	k.keyboardLayoutDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k keyboardLayout) As(alias string) *keyboardLayout {
	k.keyboardLayoutDo.DO = *(k.keyboardLayoutDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *keyboardLayout) updateTableName(table string) *keyboardLayout {
	k.ALL = field.NewAsterisk(table)
	k.LayoutID = field.NewInt32(table, "layout_id")
	k.Name = field.NewString(table, "name")

	k.fillFieldMap()

	return k
}

func (k *keyboardLayout) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *keyboardLayout) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 2)
	k.fieldMap["layout_id"] = k.LayoutID
	k.fieldMap["name"] = k.Name
}

func (k keyboardLayout) clone(db *gorm.DB) keyboardLayout {
	k.keyboardLayoutDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k keyboardLayout) replaceDB(db *gorm.DB) keyboardLayout {
	k.keyboardLayoutDo.ReplaceDB(db)
	return k
}

type keyboardLayoutDo struct{ gen.DO }

func (k keyboardLayoutDo) Debug() *keyboardLayoutDo {
	return k.withDO(k.DO.Debug())
}

func (k keyboardLayoutDo) WithContext(ctx context.Context) *keyboardLayoutDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k keyboardLayoutDo) ReadDB() *keyboardLayoutDo {
	return k.Clauses(dbresolver.Read)
}

func (k keyboardLayoutDo) WriteDB() *keyboardLayoutDo {
	return k.Clauses(dbresolver.Write)
}

func (k keyboardLayoutDo) Session(config *gorm.Session) *keyboardLayoutDo {
	return k.withDO(k.DO.Session(config))
}

func (k keyboardLayoutDo) Clauses(conds ...clause.Expression) *keyboardLayoutDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k keyboardLayoutDo) Returning(value interface{}, columns ...string) *keyboardLayoutDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k keyboardLayoutDo) Not(conds ...gen.Condition) *keyboardLayoutDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k keyboardLayoutDo) Or(conds ...gen.Condition) *keyboardLayoutDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k keyboardLayoutDo) Select(conds ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k keyboardLayoutDo) Where(conds ...gen.Condition) *keyboardLayoutDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k keyboardLayoutDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *keyboardLayoutDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k keyboardLayoutDo) Order(conds ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k keyboardLayoutDo) Distinct(cols ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k keyboardLayoutDo) Omit(cols ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k keyboardLayoutDo) Join(table schema.Tabler, on ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k keyboardLayoutDo) LeftJoin(table schema.Tabler, on ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k keyboardLayoutDo) RightJoin(table schema.Tabler, on ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k keyboardLayoutDo) Group(cols ...field.Expr) *keyboardLayoutDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k keyboardLayoutDo) Having(conds ...gen.Condition) *keyboardLayoutDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k keyboardLayoutDo) Limit(limit int) *keyboardLayoutDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k keyboardLayoutDo) Offset(offset int) *keyboardLayoutDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k keyboardLayoutDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *keyboardLayoutDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k keyboardLayoutDo) Unscoped() *keyboardLayoutDo {
	return k.withDO(k.DO.Unscoped())
}

func (k keyboardLayoutDo) Create(values ...*model.KeyboardLayout) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k keyboardLayoutDo) CreateInBatches(values []*model.KeyboardLayout, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k keyboardLayoutDo) Save(values ...*model.KeyboardLayout) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k keyboardLayoutDo) First() (*model.KeyboardLayout, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyboardLayout), nil
	}
}

func (k keyboardLayoutDo) Take() (*model.KeyboardLayout, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyboardLayout), nil
	}
}

func (k keyboardLayoutDo) Last() (*model.KeyboardLayout, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyboardLayout), nil
	}
}

func (k keyboardLayoutDo) Find() ([]*model.KeyboardLayout, error) {
	result, err := k.DO.Find()
	return result.([]*model.KeyboardLayout), err
}

func (k keyboardLayoutDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.KeyboardLayout, err error) {
	buf := make([]*model.KeyboardLayout, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k keyboardLayoutDo) FindInBatches(result *[]*model.KeyboardLayout, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k keyboardLayoutDo) Attrs(attrs ...field.AssignExpr) *keyboardLayoutDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k keyboardLayoutDo) Assign(attrs ...field.AssignExpr) *keyboardLayoutDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k keyboardLayoutDo) Joins(fields ...field.RelationField) *keyboardLayoutDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k keyboardLayoutDo) Preload(fields ...field.RelationField) *keyboardLayoutDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k keyboardLayoutDo) FirstOrInit() (*model.KeyboardLayout, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyboardLayout), nil
	}
}

func (k keyboardLayoutDo) FirstOrCreate() (*model.KeyboardLayout, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.KeyboardLayout), nil
	}
}

func (k keyboardLayoutDo) FindByPage(offset int, limit int) (result []*model.KeyboardLayout, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k keyboardLayoutDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k keyboardLayoutDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k keyboardLayoutDo) Delete(models ...*model.KeyboardLayout) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *keyboardLayoutDo) withDO(do gen.Dao) *keyboardLayoutDo {
	k.DO = *do.(*gen.DO)
	return k
}

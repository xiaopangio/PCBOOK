// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newCPU(db *gorm.DB, opts ...gen.DOOption) cPU {
	_cPU := cPU{}

	_cPU.cPUDo.UseDB(db, opts...)
	_cPU.cPUDo.UseModel(&model.CPU{})

	tableName := _cPU.cPUDo.TableName()
	_cPU.ALL = field.NewAsterisk(tableName)
	_cPU.CPUID = field.NewInt32(tableName, "cpu_id")
	_cPU.Brand = field.NewString(tableName, "brand")
	_cPU.Name = field.NewString(tableName, "name")
	_cPU.NumbersCores = field.NewInt32(tableName, "numbers_cores")
	_cPU.NumberThreads = field.NewInt32(tableName, "number_threads")
	_cPU.MinGhz = field.NewFloat32(tableName, "min_ghz")
	_cPU.MaxGhz = field.NewFloat32(tableName, "max_ghz")

	_cPU.fillFieldMap()

	return _cPU
}

type cPU struct {
	cPUDo

	ALL           field.Asterisk
	CPUID         field.Int32
	Brand         field.String
	Name          field.String
	NumbersCores  field.Int32
	NumberThreads field.Int32
	MinGhz        field.Float32
	MaxGhz        field.Float32

	fieldMap map[string]field.Expr
}

func (c cPU) Table(newTableName string) *cPU {
	c.cPUDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c cPU) As(alias string) *cPU {
	c.cPUDo.DO = *(c.cPUDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *cPU) updateTableName(table string) *cPU {
	c.ALL = field.NewAsterisk(table)
	c.CPUID = field.NewInt32(table, "cpu_id")
	c.Brand = field.NewString(table, "brand")
	c.Name = field.NewString(table, "name")
	c.NumbersCores = field.NewInt32(table, "numbers_cores")
	c.NumberThreads = field.NewInt32(table, "number_threads")
	c.MinGhz = field.NewFloat32(table, "min_ghz")
	c.MaxGhz = field.NewFloat32(table, "max_ghz")

	c.fillFieldMap()

	return c
}

func (c *cPU) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *cPU) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 7)
	c.fieldMap["cpu_id"] = c.CPUID
	c.fieldMap["brand"] = c.Brand
	c.fieldMap["name"] = c.Name
	c.fieldMap["numbers_cores"] = c.NumbersCores
	c.fieldMap["number_threads"] = c.NumberThreads
	c.fieldMap["min_ghz"] = c.MinGhz
	c.fieldMap["max_ghz"] = c.MaxGhz
}

func (c cPU) clone(db *gorm.DB) cPU {
	c.cPUDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c cPU) replaceDB(db *gorm.DB) cPU {
	c.cPUDo.ReplaceDB(db)
	return c
}

type cPUDo struct{ gen.DO }

func (c cPUDo) Debug() *cPUDo {
	return c.withDO(c.DO.Debug())
}

func (c cPUDo) WithContext(ctx context.Context) *cPUDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c cPUDo) ReadDB() *cPUDo {
	return c.Clauses(dbresolver.Read)
}

func (c cPUDo) WriteDB() *cPUDo {
	return c.Clauses(dbresolver.Write)
}

func (c cPUDo) Session(config *gorm.Session) *cPUDo {
	return c.withDO(c.DO.Session(config))
}

func (c cPUDo) Clauses(conds ...clause.Expression) *cPUDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c cPUDo) Returning(value interface{}, columns ...string) *cPUDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c cPUDo) Not(conds ...gen.Condition) *cPUDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c cPUDo) Or(conds ...gen.Condition) *cPUDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c cPUDo) Select(conds ...field.Expr) *cPUDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c cPUDo) Where(conds ...gen.Condition) *cPUDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c cPUDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *cPUDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c cPUDo) Order(conds ...field.Expr) *cPUDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c cPUDo) Distinct(cols ...field.Expr) *cPUDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c cPUDo) Omit(cols ...field.Expr) *cPUDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c cPUDo) Join(table schema.Tabler, on ...field.Expr) *cPUDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c cPUDo) LeftJoin(table schema.Tabler, on ...field.Expr) *cPUDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c cPUDo) RightJoin(table schema.Tabler, on ...field.Expr) *cPUDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c cPUDo) Group(cols ...field.Expr) *cPUDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c cPUDo) Having(conds ...gen.Condition) *cPUDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c cPUDo) Limit(limit int) *cPUDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c cPUDo) Offset(offset int) *cPUDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c cPUDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *cPUDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c cPUDo) Unscoped() *cPUDo {
	return c.withDO(c.DO.Unscoped())
}

func (c cPUDo) Create(values ...*model.CPU) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c cPUDo) CreateInBatches(values []*model.CPU, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c cPUDo) Save(values ...*model.CPU) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c cPUDo) First() (*model.CPU, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CPU), nil
	}
}

func (c cPUDo) Take() (*model.CPU, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CPU), nil
	}
}

func (c cPUDo) Last() (*model.CPU, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CPU), nil
	}
}

func (c cPUDo) Find() ([]*model.CPU, error) {
	result, err := c.DO.Find()
	return result.([]*model.CPU), err
}

func (c cPUDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CPU, err error) {
	buf := make([]*model.CPU, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c cPUDo) FindInBatches(result *[]*model.CPU, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c cPUDo) Attrs(attrs ...field.AssignExpr) *cPUDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c cPUDo) Assign(attrs ...field.AssignExpr) *cPUDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c cPUDo) Joins(fields ...field.RelationField) *cPUDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c cPUDo) Preload(fields ...field.RelationField) *cPUDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c cPUDo) FirstOrInit() (*model.CPU, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CPU), nil
	}
}

func (c cPUDo) FirstOrCreate() (*model.CPU, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CPU), nil
	}
}

func (c cPUDo) FindByPage(offset int, limit int) (result []*model.CPU, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c cPUDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c cPUDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c cPUDo) Delete(models ...*model.CPU) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *cPUDo) withDO(do gen.Dao) *cPUDo {
	c.DO = *do.(*gen.DO)
	return c
}

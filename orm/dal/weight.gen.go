// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newWeight(db *gorm.DB, opts ...gen.DOOption) weight {
	_weight := weight{}

	_weight.weightDo.UseDB(db, opts...)
	_weight.weightDo.UseModel(&model.Weight{})

	tableName := _weight.weightDo.TableName()
	_weight.ALL = field.NewAsterisk(tableName)
	_weight.WeightID = field.NewInt32(tableName, "weight_id")
	_weight.Value = field.NewFloat32(tableName, "value")
	_weight.WeightUnitID = field.NewInt32(tableName, "weight_unit_id")
	_weight.Unit = weightHasOneUnit{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Unit", "model.WeightUnit"),
	}

	_weight.fillFieldMap()

	return _weight
}

type weight struct {
	weightDo

	ALL          field.Asterisk
	WeightID     field.Int32
	Value        field.Float32
	WeightUnitID field.Int32
	Unit         weightHasOneUnit

	fieldMap map[string]field.Expr
}

func (w weight) Table(newTableName string) *weight {
	w.weightDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w weight) As(alias string) *weight {
	w.weightDo.DO = *(w.weightDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *weight) updateTableName(table string) *weight {
	w.ALL = field.NewAsterisk(table)
	w.WeightID = field.NewInt32(table, "weight_id")
	w.Value = field.NewFloat32(table, "value")
	w.WeightUnitID = field.NewInt32(table, "weight_unit_id")

	w.fillFieldMap()

	return w
}

func (w *weight) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *weight) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 4)
	w.fieldMap["weight_id"] = w.WeightID
	w.fieldMap["value"] = w.Value
	w.fieldMap["weight_unit_id"] = w.WeightUnitID

}

func (w weight) clone(db *gorm.DB) weight {
	w.weightDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w weight) replaceDB(db *gorm.DB) weight {
	w.weightDo.ReplaceDB(db)
	return w
}

type weightHasOneUnit struct {
	db *gorm.DB

	field.RelationField
}

func (a weightHasOneUnit) Where(conds ...field.Expr) *weightHasOneUnit {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a weightHasOneUnit) WithContext(ctx context.Context) *weightHasOneUnit {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a weightHasOneUnit) Model(m *model.Weight) *weightHasOneUnitTx {
	return &weightHasOneUnitTx{a.db.Model(m).Association(a.Name())}
}

type weightHasOneUnitTx struct{ tx *gorm.Association }

func (a weightHasOneUnitTx) Find() (result *model.WeightUnit, err error) {
	return result, a.tx.Find(&result)
}

func (a weightHasOneUnitTx) Append(values ...*model.WeightUnit) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a weightHasOneUnitTx) Replace(values ...*model.WeightUnit) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a weightHasOneUnitTx) Delete(values ...*model.WeightUnit) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a weightHasOneUnitTx) Clear() error {
	return a.tx.Clear()
}

func (a weightHasOneUnitTx) Count() int64 {
	return a.tx.Count()
}

type weightDo struct{ gen.DO }

func (w weightDo) Debug() *weightDo {
	return w.withDO(w.DO.Debug())
}

func (w weightDo) WithContext(ctx context.Context) *weightDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w weightDo) ReadDB() *weightDo {
	return w.Clauses(dbresolver.Read)
}

func (w weightDo) WriteDB() *weightDo {
	return w.Clauses(dbresolver.Write)
}

func (w weightDo) Session(config *gorm.Session) *weightDo {
	return w.withDO(w.DO.Session(config))
}

func (w weightDo) Clauses(conds ...clause.Expression) *weightDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w weightDo) Returning(value interface{}, columns ...string) *weightDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w weightDo) Not(conds ...gen.Condition) *weightDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w weightDo) Or(conds ...gen.Condition) *weightDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w weightDo) Select(conds ...field.Expr) *weightDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w weightDo) Where(conds ...gen.Condition) *weightDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w weightDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *weightDo {
	return w.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (w weightDo) Order(conds ...field.Expr) *weightDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w weightDo) Distinct(cols ...field.Expr) *weightDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w weightDo) Omit(cols ...field.Expr) *weightDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w weightDo) Join(table schema.Tabler, on ...field.Expr) *weightDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w weightDo) LeftJoin(table schema.Tabler, on ...field.Expr) *weightDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w weightDo) RightJoin(table schema.Tabler, on ...field.Expr) *weightDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w weightDo) Group(cols ...field.Expr) *weightDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w weightDo) Having(conds ...gen.Condition) *weightDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w weightDo) Limit(limit int) *weightDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w weightDo) Offset(offset int) *weightDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w weightDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *weightDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w weightDo) Unscoped() *weightDo {
	return w.withDO(w.DO.Unscoped())
}

func (w weightDo) Create(values ...*model.Weight) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w weightDo) CreateInBatches(values []*model.Weight, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w weightDo) Save(values ...*model.Weight) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w weightDo) First() (*model.Weight, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Weight), nil
	}
}

func (w weightDo) Take() (*model.Weight, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Weight), nil
	}
}

func (w weightDo) Last() (*model.Weight, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Weight), nil
	}
}

func (w weightDo) Find() ([]*model.Weight, error) {
	result, err := w.DO.Find()
	return result.([]*model.Weight), err
}

func (w weightDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Weight, err error) {
	buf := make([]*model.Weight, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w weightDo) FindInBatches(result *[]*model.Weight, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w weightDo) Attrs(attrs ...field.AssignExpr) *weightDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w weightDo) Assign(attrs ...field.AssignExpr) *weightDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w weightDo) Joins(fields ...field.RelationField) *weightDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w weightDo) Preload(fields ...field.RelationField) *weightDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w weightDo) FirstOrInit() (*model.Weight, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Weight), nil
	}
}

func (w weightDo) FirstOrCreate() (*model.Weight, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Weight), nil
	}
}

func (w weightDo) FindByPage(offset int, limit int) (result []*model.Weight, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w weightDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w weightDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w weightDo) Delete(models ...*model.Weight) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *weightDo) withDO(do gen.Dao) *weightDo {
	w.DO = *do.(*gen.DO)
	return w
}

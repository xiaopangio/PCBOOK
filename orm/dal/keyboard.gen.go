// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newKeyboard(db *gorm.DB, opts ...gen.DOOption) keyboard {
	_keyboard := keyboard{}

	_keyboard.keyboardDo.UseDB(db, opts...)
	_keyboard.keyboardDo.UseModel(&model.Keyboard{})

	tableName := _keyboard.keyboardDo.TableName()
	_keyboard.ALL = field.NewAsterisk(tableName)
	_keyboard.KeyboardID = field.NewInt32(tableName, "keyboard_id")
	_keyboard.LayoutID = field.NewInt32(tableName, "layout_id")
	_keyboard.Backlit = field.NewBool(tableName, "backlit")
	_keyboard.Layout = keyboardHasOneLayout{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Layout", "model.KeyboardLayout"),
	}

	_keyboard.fillFieldMap()

	return _keyboard
}

type keyboard struct {
	keyboardDo

	ALL        field.Asterisk
	KeyboardID field.Int32
	LayoutID   field.Int32
	Backlit    field.Bool
	Layout     keyboardHasOneLayout

	fieldMap map[string]field.Expr
}

func (k keyboard) Table(newTableName string) *keyboard {
	k.keyboardDo.UseTable(newTableName)
	return k.updateTableName(newTableName)
}

func (k keyboard) As(alias string) *keyboard {
	k.keyboardDo.DO = *(k.keyboardDo.As(alias).(*gen.DO))
	return k.updateTableName(alias)
}

func (k *keyboard) updateTableName(table string) *keyboard {
	k.ALL = field.NewAsterisk(table)
	k.KeyboardID = field.NewInt32(table, "keyboard_id")
	k.LayoutID = field.NewInt32(table, "layout_id")
	k.Backlit = field.NewBool(table, "backlit")

	k.fillFieldMap()

	return k
}

func (k *keyboard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := k.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (k *keyboard) fillFieldMap() {
	k.fieldMap = make(map[string]field.Expr, 4)
	k.fieldMap["keyboard_id"] = k.KeyboardID
	k.fieldMap["layout_id"] = k.LayoutID
	k.fieldMap["backlit"] = k.Backlit

}

func (k keyboard) clone(db *gorm.DB) keyboard {
	k.keyboardDo.ReplaceConnPool(db.Statement.ConnPool)
	return k
}

func (k keyboard) replaceDB(db *gorm.DB) keyboard {
	k.keyboardDo.ReplaceDB(db)
	return k
}

type keyboardHasOneLayout struct {
	db *gorm.DB

	field.RelationField
}

func (a keyboardHasOneLayout) Where(conds ...field.Expr) *keyboardHasOneLayout {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a keyboardHasOneLayout) WithContext(ctx context.Context) *keyboardHasOneLayout {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a keyboardHasOneLayout) Model(m *model.Keyboard) *keyboardHasOneLayoutTx {
	return &keyboardHasOneLayoutTx{a.db.Model(m).Association(a.Name())}
}

type keyboardHasOneLayoutTx struct{ tx *gorm.Association }

func (a keyboardHasOneLayoutTx) Find() (result *model.KeyboardLayout, err error) {
	return result, a.tx.Find(&result)
}

func (a keyboardHasOneLayoutTx) Append(values ...*model.KeyboardLayout) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a keyboardHasOneLayoutTx) Replace(values ...*model.KeyboardLayout) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a keyboardHasOneLayoutTx) Delete(values ...*model.KeyboardLayout) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a keyboardHasOneLayoutTx) Clear() error {
	return a.tx.Clear()
}

func (a keyboardHasOneLayoutTx) Count() int64 {
	return a.tx.Count()
}

type keyboardDo struct{ gen.DO }

func (k keyboardDo) Debug() *keyboardDo {
	return k.withDO(k.DO.Debug())
}

func (k keyboardDo) WithContext(ctx context.Context) *keyboardDo {
	return k.withDO(k.DO.WithContext(ctx))
}

func (k keyboardDo) ReadDB() *keyboardDo {
	return k.Clauses(dbresolver.Read)
}

func (k keyboardDo) WriteDB() *keyboardDo {
	return k.Clauses(dbresolver.Write)
}

func (k keyboardDo) Session(config *gorm.Session) *keyboardDo {
	return k.withDO(k.DO.Session(config))
}

func (k keyboardDo) Clauses(conds ...clause.Expression) *keyboardDo {
	return k.withDO(k.DO.Clauses(conds...))
}

func (k keyboardDo) Returning(value interface{}, columns ...string) *keyboardDo {
	return k.withDO(k.DO.Returning(value, columns...))
}

func (k keyboardDo) Not(conds ...gen.Condition) *keyboardDo {
	return k.withDO(k.DO.Not(conds...))
}

func (k keyboardDo) Or(conds ...gen.Condition) *keyboardDo {
	return k.withDO(k.DO.Or(conds...))
}

func (k keyboardDo) Select(conds ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.Select(conds...))
}

func (k keyboardDo) Where(conds ...gen.Condition) *keyboardDo {
	return k.withDO(k.DO.Where(conds...))
}

func (k keyboardDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *keyboardDo {
	return k.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (k keyboardDo) Order(conds ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.Order(conds...))
}

func (k keyboardDo) Distinct(cols ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.Distinct(cols...))
}

func (k keyboardDo) Omit(cols ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.Omit(cols...))
}

func (k keyboardDo) Join(table schema.Tabler, on ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.Join(table, on...))
}

func (k keyboardDo) LeftJoin(table schema.Tabler, on ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.LeftJoin(table, on...))
}

func (k keyboardDo) RightJoin(table schema.Tabler, on ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.RightJoin(table, on...))
}

func (k keyboardDo) Group(cols ...field.Expr) *keyboardDo {
	return k.withDO(k.DO.Group(cols...))
}

func (k keyboardDo) Having(conds ...gen.Condition) *keyboardDo {
	return k.withDO(k.DO.Having(conds...))
}

func (k keyboardDo) Limit(limit int) *keyboardDo {
	return k.withDO(k.DO.Limit(limit))
}

func (k keyboardDo) Offset(offset int) *keyboardDo {
	return k.withDO(k.DO.Offset(offset))
}

func (k keyboardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *keyboardDo {
	return k.withDO(k.DO.Scopes(funcs...))
}

func (k keyboardDo) Unscoped() *keyboardDo {
	return k.withDO(k.DO.Unscoped())
}

func (k keyboardDo) Create(values ...*model.Keyboard) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Create(values)
}

func (k keyboardDo) CreateInBatches(values []*model.Keyboard, batchSize int) error {
	return k.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (k keyboardDo) Save(values ...*model.Keyboard) error {
	if len(values) == 0 {
		return nil
	}
	return k.DO.Save(values)
}

func (k keyboardDo) First() (*model.Keyboard, error) {
	if result, err := k.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyboard), nil
	}
}

func (k keyboardDo) Take() (*model.Keyboard, error) {
	if result, err := k.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyboard), nil
	}
}

func (k keyboardDo) Last() (*model.Keyboard, error) {
	if result, err := k.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyboard), nil
	}
}

func (k keyboardDo) Find() ([]*model.Keyboard, error) {
	result, err := k.DO.Find()
	return result.([]*model.Keyboard), err
}

func (k keyboardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Keyboard, err error) {
	buf := make([]*model.Keyboard, 0, batchSize)
	err = k.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (k keyboardDo) FindInBatches(result *[]*model.Keyboard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return k.DO.FindInBatches(result, batchSize, fc)
}

func (k keyboardDo) Attrs(attrs ...field.AssignExpr) *keyboardDo {
	return k.withDO(k.DO.Attrs(attrs...))
}

func (k keyboardDo) Assign(attrs ...field.AssignExpr) *keyboardDo {
	return k.withDO(k.DO.Assign(attrs...))
}

func (k keyboardDo) Joins(fields ...field.RelationField) *keyboardDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Joins(_f))
	}
	return &k
}

func (k keyboardDo) Preload(fields ...field.RelationField) *keyboardDo {
	for _, _f := range fields {
		k = *k.withDO(k.DO.Preload(_f))
	}
	return &k
}

func (k keyboardDo) FirstOrInit() (*model.Keyboard, error) {
	if result, err := k.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyboard), nil
	}
}

func (k keyboardDo) FirstOrCreate() (*model.Keyboard, error) {
	if result, err := k.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Keyboard), nil
	}
}

func (k keyboardDo) FindByPage(offset int, limit int) (result []*model.Keyboard, count int64, err error) {
	result, err = k.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = k.Offset(-1).Limit(-1).Count()
	return
}

func (k keyboardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = k.Count()
	if err != nil {
		return
	}

	err = k.Offset(offset).Limit(limit).Scan(result)
	return
}

func (k keyboardDo) Scan(result interface{}) (err error) {
	return k.DO.Scan(result)
}

func (k keyboardDo) Delete(models ...*model.Keyboard) (result gen.ResultInfo, err error) {
	return k.DO.Delete(models)
}

func (k *keyboardDo) withDO(do gen.Dao) *keyboardDo {
	k.DO = *do.(*gen.DO)
	return k
}

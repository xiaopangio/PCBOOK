// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newStorage(db *gorm.DB, opts ...gen.DOOption) storage {
	_storage := storage{}

	_storage.storageDo.UseDB(db, opts...)
	_storage.storageDo.UseModel(&model.Storage{})

	tableName := _storage.storageDo.TableName()
	_storage.ALL = field.NewAsterisk(tableName)
	_storage.StorageID = field.NewInt32(tableName, "storage_id")
	_storage.DriverID = field.NewInt32(tableName, "driver_id")
	_storage.MemoryID = field.NewInt32(tableName, "memory_id")
	_storage.Driver = storageHasOneDriver{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Driver", "model.StorageDriver"),
	}

	_storage.Memory = storageHasOneMemory{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Memory", "model.Memory"),
		Unit: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Memory.Unit", "model.MemoryUnit"),
		},
	}

	_storage.fillFieldMap()

	return _storage
}

type storage struct {
	storageDo

	ALL       field.Asterisk
	StorageID field.Int32
	DriverID  field.Int32
	MemoryID  field.Int32
	Driver    storageHasOneDriver

	Memory storageHasOneMemory

	fieldMap map[string]field.Expr
}

func (s storage) Table(newTableName string) *storage {
	s.storageDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storage) As(alias string) *storage {
	s.storageDo.DO = *(s.storageDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storage) updateTableName(table string) *storage {
	s.ALL = field.NewAsterisk(table)
	s.StorageID = field.NewInt32(table, "storage_id")
	s.DriverID = field.NewInt32(table, "driver_id")
	s.MemoryID = field.NewInt32(table, "memory_id")

	s.fillFieldMap()

	return s
}

func (s *storage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storage) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["storage_id"] = s.StorageID
	s.fieldMap["driver_id"] = s.DriverID
	s.fieldMap["memory_id"] = s.MemoryID

}

func (s storage) clone(db *gorm.DB) storage {
	s.storageDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storage) replaceDB(db *gorm.DB) storage {
	s.storageDo.ReplaceDB(db)
	return s
}

type storageHasOneDriver struct {
	db *gorm.DB

	field.RelationField
}

func (a storageHasOneDriver) Where(conds ...field.Expr) *storageHasOneDriver {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a storageHasOneDriver) WithContext(ctx context.Context) *storageHasOneDriver {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a storageHasOneDriver) Model(m *model.Storage) *storageHasOneDriverTx {
	return &storageHasOneDriverTx{a.db.Model(m).Association(a.Name())}
}

type storageHasOneDriverTx struct{ tx *gorm.Association }

func (a storageHasOneDriverTx) Find() (result *model.StorageDriver, err error) {
	return result, a.tx.Find(&result)
}

func (a storageHasOneDriverTx) Append(values ...*model.StorageDriver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a storageHasOneDriverTx) Replace(values ...*model.StorageDriver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a storageHasOneDriverTx) Delete(values ...*model.StorageDriver) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a storageHasOneDriverTx) Clear() error {
	return a.tx.Clear()
}

func (a storageHasOneDriverTx) Count() int64 {
	return a.tx.Count()
}

type storageHasOneMemory struct {
	db *gorm.DB

	field.RelationField

	Unit struct {
		field.RelationField
	}
}

func (a storageHasOneMemory) Where(conds ...field.Expr) *storageHasOneMemory {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a storageHasOneMemory) WithContext(ctx context.Context) *storageHasOneMemory {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a storageHasOneMemory) Model(m *model.Storage) *storageHasOneMemoryTx {
	return &storageHasOneMemoryTx{a.db.Model(m).Association(a.Name())}
}

type storageHasOneMemoryTx struct{ tx *gorm.Association }

func (a storageHasOneMemoryTx) Find() (result *model.Memory, err error) {
	return result, a.tx.Find(&result)
}

func (a storageHasOneMemoryTx) Append(values ...*model.Memory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a storageHasOneMemoryTx) Replace(values ...*model.Memory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a storageHasOneMemoryTx) Delete(values ...*model.Memory) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a storageHasOneMemoryTx) Clear() error {
	return a.tx.Clear()
}

func (a storageHasOneMemoryTx) Count() int64 {
	return a.tx.Count()
}

type storageDo struct{ gen.DO }

func (s storageDo) Debug() *storageDo {
	return s.withDO(s.DO.Debug())
}

func (s storageDo) WithContext(ctx context.Context) *storageDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storageDo) ReadDB() *storageDo {
	return s.Clauses(dbresolver.Read)
}

func (s storageDo) WriteDB() *storageDo {
	return s.Clauses(dbresolver.Write)
}

func (s storageDo) Session(config *gorm.Session) *storageDo {
	return s.withDO(s.DO.Session(config))
}

func (s storageDo) Clauses(conds ...clause.Expression) *storageDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storageDo) Returning(value interface{}, columns ...string) *storageDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storageDo) Not(conds ...gen.Condition) *storageDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storageDo) Or(conds ...gen.Condition) *storageDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storageDo) Select(conds ...field.Expr) *storageDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storageDo) Where(conds ...gen.Condition) *storageDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storageDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *storageDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s storageDo) Order(conds ...field.Expr) *storageDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storageDo) Distinct(cols ...field.Expr) *storageDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storageDo) Omit(cols ...field.Expr) *storageDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storageDo) Join(table schema.Tabler, on ...field.Expr) *storageDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storageDo) LeftJoin(table schema.Tabler, on ...field.Expr) *storageDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storageDo) RightJoin(table schema.Tabler, on ...field.Expr) *storageDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storageDo) Group(cols ...field.Expr) *storageDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storageDo) Having(conds ...gen.Condition) *storageDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storageDo) Limit(limit int) *storageDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storageDo) Offset(offset int) *storageDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *storageDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storageDo) Unscoped() *storageDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storageDo) Create(values ...*model.Storage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storageDo) CreateInBatches(values []*model.Storage, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storageDo) Save(values ...*model.Storage) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storageDo) First() (*model.Storage, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) Take() (*model.Storage, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) Last() (*model.Storage, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) Find() ([]*model.Storage, error) {
	result, err := s.DO.Find()
	return result.([]*model.Storage), err
}

func (s storageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Storage, err error) {
	buf := make([]*model.Storage, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storageDo) FindInBatches(result *[]*model.Storage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storageDo) Attrs(attrs ...field.AssignExpr) *storageDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storageDo) Assign(attrs ...field.AssignExpr) *storageDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storageDo) Joins(fields ...field.RelationField) *storageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storageDo) Preload(fields ...field.RelationField) *storageDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storageDo) FirstOrInit() (*model.Storage, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) FirstOrCreate() (*model.Storage, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Storage), nil
	}
}

func (s storageDo) FindByPage(offset int, limit int) (result []*model.Storage, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storageDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storageDo) Delete(models ...*model.Storage) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storageDo) withDO(do gen.Dao) *storageDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newMemoryUnit(db *gorm.DB, opts ...gen.DOOption) memoryUnit {
	_memoryUnit := memoryUnit{}

	_memoryUnit.memoryUnitDo.UseDB(db, opts...)
	_memoryUnit.memoryUnitDo.UseModel(&model.MemoryUnit{})

	tableName := _memoryUnit.memoryUnitDo.TableName()
	_memoryUnit.ALL = field.NewAsterisk(tableName)
	_memoryUnit.MemoryUnitID = field.NewInt32(tableName, "memory_unit_id")
	_memoryUnit.UnitName = field.NewString(tableName, "unit_name")

	_memoryUnit.fillFieldMap()

	return _memoryUnit
}

type memoryUnit struct {
	memoryUnitDo

	ALL          field.Asterisk
	MemoryUnitID field.Int32
	UnitName     field.String

	fieldMap map[string]field.Expr
}

func (m memoryUnit) Table(newTableName string) *memoryUnit {
	m.memoryUnitDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m memoryUnit) As(alias string) *memoryUnit {
	m.memoryUnitDo.DO = *(m.memoryUnitDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *memoryUnit) updateTableName(table string) *memoryUnit {
	m.ALL = field.NewAsterisk(table)
	m.MemoryUnitID = field.NewInt32(table, "memory_unit_id")
	m.UnitName = field.NewString(table, "unit_name")

	m.fillFieldMap()

	return m
}

func (m *memoryUnit) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *memoryUnit) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["memory_unit_id"] = m.MemoryUnitID
	m.fieldMap["unit_name"] = m.UnitName
}

func (m memoryUnit) clone(db *gorm.DB) memoryUnit {
	m.memoryUnitDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m memoryUnit) replaceDB(db *gorm.DB) memoryUnit {
	m.memoryUnitDo.ReplaceDB(db)
	return m
}

type memoryUnitDo struct{ gen.DO }

func (m memoryUnitDo) Debug() *memoryUnitDo {
	return m.withDO(m.DO.Debug())
}

func (m memoryUnitDo) WithContext(ctx context.Context) *memoryUnitDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m memoryUnitDo) ReadDB() *memoryUnitDo {
	return m.Clauses(dbresolver.Read)
}

func (m memoryUnitDo) WriteDB() *memoryUnitDo {
	return m.Clauses(dbresolver.Write)
}

func (m memoryUnitDo) Session(config *gorm.Session) *memoryUnitDo {
	return m.withDO(m.DO.Session(config))
}

func (m memoryUnitDo) Clauses(conds ...clause.Expression) *memoryUnitDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m memoryUnitDo) Returning(value interface{}, columns ...string) *memoryUnitDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m memoryUnitDo) Not(conds ...gen.Condition) *memoryUnitDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m memoryUnitDo) Or(conds ...gen.Condition) *memoryUnitDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m memoryUnitDo) Select(conds ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m memoryUnitDo) Where(conds ...gen.Condition) *memoryUnitDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m memoryUnitDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *memoryUnitDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m memoryUnitDo) Order(conds ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m memoryUnitDo) Distinct(cols ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m memoryUnitDo) Omit(cols ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m memoryUnitDo) Join(table schema.Tabler, on ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m memoryUnitDo) LeftJoin(table schema.Tabler, on ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m memoryUnitDo) RightJoin(table schema.Tabler, on ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m memoryUnitDo) Group(cols ...field.Expr) *memoryUnitDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m memoryUnitDo) Having(conds ...gen.Condition) *memoryUnitDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m memoryUnitDo) Limit(limit int) *memoryUnitDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m memoryUnitDo) Offset(offset int) *memoryUnitDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m memoryUnitDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *memoryUnitDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m memoryUnitDo) Unscoped() *memoryUnitDo {
	return m.withDO(m.DO.Unscoped())
}

func (m memoryUnitDo) Create(values ...*model.MemoryUnit) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m memoryUnitDo) CreateInBatches(values []*model.MemoryUnit, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m memoryUnitDo) Save(values ...*model.MemoryUnit) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m memoryUnitDo) First() (*model.MemoryUnit, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoryUnit), nil
	}
}

func (m memoryUnitDo) Take() (*model.MemoryUnit, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoryUnit), nil
	}
}

func (m memoryUnitDo) Last() (*model.MemoryUnit, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoryUnit), nil
	}
}

func (m memoryUnitDo) Find() ([]*model.MemoryUnit, error) {
	result, err := m.DO.Find()
	return result.([]*model.MemoryUnit), err
}

func (m memoryUnitDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MemoryUnit, err error) {
	buf := make([]*model.MemoryUnit, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m memoryUnitDo) FindInBatches(result *[]*model.MemoryUnit, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m memoryUnitDo) Attrs(attrs ...field.AssignExpr) *memoryUnitDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m memoryUnitDo) Assign(attrs ...field.AssignExpr) *memoryUnitDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m memoryUnitDo) Joins(fields ...field.RelationField) *memoryUnitDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m memoryUnitDo) Preload(fields ...field.RelationField) *memoryUnitDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m memoryUnitDo) FirstOrInit() (*model.MemoryUnit, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoryUnit), nil
	}
}

func (m memoryUnitDo) FirstOrCreate() (*model.MemoryUnit, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MemoryUnit), nil
	}
}

func (m memoryUnitDo) FindByPage(offset int, limit int) (result []*model.MemoryUnit, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m memoryUnitDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m memoryUnitDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m memoryUnitDo) Delete(models ...*model.MemoryUnit) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *memoryUnitDo) withDO(do gen.Dao) *memoryUnitDo {
	m.DO = *do.(*gen.DO)
	return m
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newScreen(db *gorm.DB, opts ...gen.DOOption) screen {
	_screen := screen{}

	_screen.screenDo.UseDB(db, opts...)
	_screen.screenDo.UseModel(&model.Screen{})

	tableName := _screen.screenDo.TableName()
	_screen.ALL = field.NewAsterisk(tableName)
	_screen.ScreenID = field.NewInt32(tableName, "screen_id")
	_screen.SizeInch = field.NewFloat32(tableName, "size_inch")
	_screen.ResolutionID = field.NewInt32(tableName, "resolution_id")
	_screen.PanelID = field.NewInt32(tableName, "panel_id")
	_screen.Multitouch = field.NewInt32(tableName, "multitouch")
	_screen.Resolution = screenHasOneResolution{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Resolution", "model.ScreenResolution"),
	}

	_screen.Panel = screenHasOnePanel{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Panel", "model.ScreenPanel"),
	}

	_screen.fillFieldMap()

	return _screen
}

type screen struct {
	screenDo

	ALL          field.Asterisk
	ScreenID     field.Int32
	SizeInch     field.Float32
	ResolutionID field.Int32
	PanelID      field.Int32
	Multitouch   field.Int32
	Resolution   screenHasOneResolution

	Panel screenHasOnePanel

	fieldMap map[string]field.Expr
}

func (s screen) Table(newTableName string) *screen {
	s.screenDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s screen) As(alias string) *screen {
	s.screenDo.DO = *(s.screenDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *screen) updateTableName(table string) *screen {
	s.ALL = field.NewAsterisk(table)
	s.ScreenID = field.NewInt32(table, "screen_id")
	s.SizeInch = field.NewFloat32(table, "size_inch")
	s.ResolutionID = field.NewInt32(table, "resolution_id")
	s.PanelID = field.NewInt32(table, "panel_id")
	s.Multitouch = field.NewInt32(table, "multitouch")

	s.fillFieldMap()

	return s
}

func (s *screen) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *screen) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["screen_id"] = s.ScreenID
	s.fieldMap["size_inch"] = s.SizeInch
	s.fieldMap["resolution_id"] = s.ResolutionID
	s.fieldMap["panel_id"] = s.PanelID
	s.fieldMap["multitouch"] = s.Multitouch

}

func (s screen) clone(db *gorm.DB) screen {
	s.screenDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s screen) replaceDB(db *gorm.DB) screen {
	s.screenDo.ReplaceDB(db)
	return s
}

type screenHasOneResolution struct {
	db *gorm.DB

	field.RelationField
}

func (a screenHasOneResolution) Where(conds ...field.Expr) *screenHasOneResolution {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a screenHasOneResolution) WithContext(ctx context.Context) *screenHasOneResolution {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a screenHasOneResolution) Model(m *model.Screen) *screenHasOneResolutionTx {
	return &screenHasOneResolutionTx{a.db.Model(m).Association(a.Name())}
}

type screenHasOneResolutionTx struct{ tx *gorm.Association }

func (a screenHasOneResolutionTx) Find() (result *model.ScreenResolution, err error) {
	return result, a.tx.Find(&result)
}

func (a screenHasOneResolutionTx) Append(values ...*model.ScreenResolution) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a screenHasOneResolutionTx) Replace(values ...*model.ScreenResolution) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a screenHasOneResolutionTx) Delete(values ...*model.ScreenResolution) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a screenHasOneResolutionTx) Clear() error {
	return a.tx.Clear()
}

func (a screenHasOneResolutionTx) Count() int64 {
	return a.tx.Count()
}

type screenHasOnePanel struct {
	db *gorm.DB

	field.RelationField
}

func (a screenHasOnePanel) Where(conds ...field.Expr) *screenHasOnePanel {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a screenHasOnePanel) WithContext(ctx context.Context) *screenHasOnePanel {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a screenHasOnePanel) Model(m *model.Screen) *screenHasOnePanelTx {
	return &screenHasOnePanelTx{a.db.Model(m).Association(a.Name())}
}

type screenHasOnePanelTx struct{ tx *gorm.Association }

func (a screenHasOnePanelTx) Find() (result *model.ScreenPanel, err error) {
	return result, a.tx.Find(&result)
}

func (a screenHasOnePanelTx) Append(values ...*model.ScreenPanel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a screenHasOnePanelTx) Replace(values ...*model.ScreenPanel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a screenHasOnePanelTx) Delete(values ...*model.ScreenPanel) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a screenHasOnePanelTx) Clear() error {
	return a.tx.Clear()
}

func (a screenHasOnePanelTx) Count() int64 {
	return a.tx.Count()
}

type screenDo struct{ gen.DO }

func (s screenDo) Debug() *screenDo {
	return s.withDO(s.DO.Debug())
}

func (s screenDo) WithContext(ctx context.Context) *screenDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s screenDo) ReadDB() *screenDo {
	return s.Clauses(dbresolver.Read)
}

func (s screenDo) WriteDB() *screenDo {
	return s.Clauses(dbresolver.Write)
}

func (s screenDo) Session(config *gorm.Session) *screenDo {
	return s.withDO(s.DO.Session(config))
}

func (s screenDo) Clauses(conds ...clause.Expression) *screenDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s screenDo) Returning(value interface{}, columns ...string) *screenDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s screenDo) Not(conds ...gen.Condition) *screenDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s screenDo) Or(conds ...gen.Condition) *screenDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s screenDo) Select(conds ...field.Expr) *screenDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s screenDo) Where(conds ...gen.Condition) *screenDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s screenDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *screenDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s screenDo) Order(conds ...field.Expr) *screenDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s screenDo) Distinct(cols ...field.Expr) *screenDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s screenDo) Omit(cols ...field.Expr) *screenDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s screenDo) Join(table schema.Tabler, on ...field.Expr) *screenDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s screenDo) LeftJoin(table schema.Tabler, on ...field.Expr) *screenDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s screenDo) RightJoin(table schema.Tabler, on ...field.Expr) *screenDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s screenDo) Group(cols ...field.Expr) *screenDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s screenDo) Having(conds ...gen.Condition) *screenDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s screenDo) Limit(limit int) *screenDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s screenDo) Offset(offset int) *screenDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s screenDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *screenDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s screenDo) Unscoped() *screenDo {
	return s.withDO(s.DO.Unscoped())
}

func (s screenDo) Create(values ...*model.Screen) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s screenDo) CreateInBatches(values []*model.Screen, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s screenDo) Save(values ...*model.Screen) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s screenDo) First() (*model.Screen, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Screen), nil
	}
}

func (s screenDo) Take() (*model.Screen, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Screen), nil
	}
}

func (s screenDo) Last() (*model.Screen, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Screen), nil
	}
}

func (s screenDo) Find() ([]*model.Screen, error) {
	result, err := s.DO.Find()
	return result.([]*model.Screen), err
}

func (s screenDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Screen, err error) {
	buf := make([]*model.Screen, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s screenDo) FindInBatches(result *[]*model.Screen, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s screenDo) Attrs(attrs ...field.AssignExpr) *screenDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s screenDo) Assign(attrs ...field.AssignExpr) *screenDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s screenDo) Joins(fields ...field.RelationField) *screenDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s screenDo) Preload(fields ...field.RelationField) *screenDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s screenDo) FirstOrInit() (*model.Screen, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Screen), nil
	}
}

func (s screenDo) FirstOrCreate() (*model.Screen, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Screen), nil
	}
}

func (s screenDo) FindByPage(offset int, limit int) (result []*model.Screen, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s screenDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s screenDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s screenDo) Delete(models ...*model.Screen) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *screenDo) withDO(do gen.Dao) *screenDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/xiaopangio/pcbook/orm/model"
)

func newStorageDriver(db *gorm.DB, opts ...gen.DOOption) storageDriver {
	_storageDriver := storageDriver{}

	_storageDriver.storageDriverDo.UseDB(db, opts...)
	_storageDriver.storageDriverDo.UseModel(&model.StorageDriver{})

	tableName := _storageDriver.storageDriverDo.TableName()
	_storageDriver.ALL = field.NewAsterisk(tableName)
	_storageDriver.StorageDriverID = field.NewInt32(tableName, "storage_driver_id")
	_storageDriver.Name = field.NewString(tableName, "name")

	_storageDriver.fillFieldMap()

	return _storageDriver
}

type storageDriver struct {
	storageDriverDo

	ALL             field.Asterisk
	StorageDriverID field.Int32
	Name            field.String

	fieldMap map[string]field.Expr
}

func (s storageDriver) Table(newTableName string) *storageDriver {
	s.storageDriverDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s storageDriver) As(alias string) *storageDriver {
	s.storageDriverDo.DO = *(s.storageDriverDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *storageDriver) updateTableName(table string) *storageDriver {
	s.ALL = field.NewAsterisk(table)
	s.StorageDriverID = field.NewInt32(table, "storage_driver_id")
	s.Name = field.NewString(table, "name")

	s.fillFieldMap()

	return s
}

func (s *storageDriver) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *storageDriver) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["storage_driver_id"] = s.StorageDriverID
	s.fieldMap["name"] = s.Name
}

func (s storageDriver) clone(db *gorm.DB) storageDriver {
	s.storageDriverDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s storageDriver) replaceDB(db *gorm.DB) storageDriver {
	s.storageDriverDo.ReplaceDB(db)
	return s
}

type storageDriverDo struct{ gen.DO }

func (s storageDriverDo) Debug() *storageDriverDo {
	return s.withDO(s.DO.Debug())
}

func (s storageDriverDo) WithContext(ctx context.Context) *storageDriverDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s storageDriverDo) ReadDB() *storageDriverDo {
	return s.Clauses(dbresolver.Read)
}

func (s storageDriverDo) WriteDB() *storageDriverDo {
	return s.Clauses(dbresolver.Write)
}

func (s storageDriverDo) Session(config *gorm.Session) *storageDriverDo {
	return s.withDO(s.DO.Session(config))
}

func (s storageDriverDo) Clauses(conds ...clause.Expression) *storageDriverDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s storageDriverDo) Returning(value interface{}, columns ...string) *storageDriverDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s storageDriverDo) Not(conds ...gen.Condition) *storageDriverDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s storageDriverDo) Or(conds ...gen.Condition) *storageDriverDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s storageDriverDo) Select(conds ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s storageDriverDo) Where(conds ...gen.Condition) *storageDriverDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s storageDriverDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *storageDriverDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s storageDriverDo) Order(conds ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s storageDriverDo) Distinct(cols ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s storageDriverDo) Omit(cols ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s storageDriverDo) Join(table schema.Tabler, on ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s storageDriverDo) LeftJoin(table schema.Tabler, on ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s storageDriverDo) RightJoin(table schema.Tabler, on ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s storageDriverDo) Group(cols ...field.Expr) *storageDriverDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s storageDriverDo) Having(conds ...gen.Condition) *storageDriverDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s storageDriverDo) Limit(limit int) *storageDriverDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s storageDriverDo) Offset(offset int) *storageDriverDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s storageDriverDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *storageDriverDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s storageDriverDo) Unscoped() *storageDriverDo {
	return s.withDO(s.DO.Unscoped())
}

func (s storageDriverDo) Create(values ...*model.StorageDriver) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s storageDriverDo) CreateInBatches(values []*model.StorageDriver, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s storageDriverDo) Save(values ...*model.StorageDriver) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s storageDriverDo) First() (*model.StorageDriver, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.StorageDriver), nil
	}
}

func (s storageDriverDo) Take() (*model.StorageDriver, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.StorageDriver), nil
	}
}

func (s storageDriverDo) Last() (*model.StorageDriver, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.StorageDriver), nil
	}
}

func (s storageDriverDo) Find() ([]*model.StorageDriver, error) {
	result, err := s.DO.Find()
	return result.([]*model.StorageDriver), err
}

func (s storageDriverDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.StorageDriver, err error) {
	buf := make([]*model.StorageDriver, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s storageDriverDo) FindInBatches(result *[]*model.StorageDriver, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s storageDriverDo) Attrs(attrs ...field.AssignExpr) *storageDriverDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s storageDriverDo) Assign(attrs ...field.AssignExpr) *storageDriverDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s storageDriverDo) Joins(fields ...field.RelationField) *storageDriverDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s storageDriverDo) Preload(fields ...field.RelationField) *storageDriverDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s storageDriverDo) FirstOrInit() (*model.StorageDriver, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.StorageDriver), nil
	}
}

func (s storageDriverDo) FirstOrCreate() (*model.StorageDriver, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.StorageDriver), nil
	}
}

func (s storageDriverDo) FindByPage(offset int, limit int) (result []*model.StorageDriver, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s storageDriverDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s storageDriverDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s storageDriverDo) Delete(models ...*model.StorageDriver) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *storageDriverDo) withDO(do gen.Dao) *storageDriverDo {
	s.DO = *do.(*gen.DO)
	return s
}

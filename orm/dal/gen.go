// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	CPU              *cPU
	Gpu              *gpu
	Keyboard         *keyboard
	KeyboardLayout   *keyboardLayout
	Laptap           *laptap
	LaptapGpu        *laptapGpu
	LaptapStorage    *laptapStorage
	Memory           *memory
	MemoryUnit       *memoryUnit
	Role             *role
	Screen           *screen
	ScreenPanel      *screenPanel
	ScreenResolution *screenResolution
	Storage          *storage
	StorageDriver    *storageDriver
	User             *user
	Weight           *weight
	WeightUnit       *weightUnit
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	CPU = &Q.CPU
	Gpu = &Q.Gpu
	Keyboard = &Q.Keyboard
	KeyboardLayout = &Q.KeyboardLayout
	Laptap = &Q.Laptap
	LaptapGpu = &Q.LaptapGpu
	LaptapStorage = &Q.LaptapStorage
	Memory = &Q.Memory
	MemoryUnit = &Q.MemoryUnit
	Role = &Q.Role
	Screen = &Q.Screen
	ScreenPanel = &Q.ScreenPanel
	ScreenResolution = &Q.ScreenResolution
	Storage = &Q.Storage
	StorageDriver = &Q.StorageDriver
	User = &Q.User
	Weight = &Q.Weight
	WeightUnit = &Q.WeightUnit
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		CPU:              newCPU(db, opts...),
		Gpu:              newGpu(db, opts...),
		Keyboard:         newKeyboard(db, opts...),
		KeyboardLayout:   newKeyboardLayout(db, opts...),
		Laptap:           newLaptap(db, opts...),
		LaptapGpu:        newLaptapGpu(db, opts...),
		LaptapStorage:    newLaptapStorage(db, opts...),
		Memory:           newMemory(db, opts...),
		MemoryUnit:       newMemoryUnit(db, opts...),
		Role:             newRole(db, opts...),
		Screen:           newScreen(db, opts...),
		ScreenPanel:      newScreenPanel(db, opts...),
		ScreenResolution: newScreenResolution(db, opts...),
		Storage:          newStorage(db, opts...),
		StorageDriver:    newStorageDriver(db, opts...),
		User:             newUser(db, opts...),
		Weight:           newWeight(db, opts...),
		WeightUnit:       newWeightUnit(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	CPU              cPU
	Gpu              gpu
	Keyboard         keyboard
	KeyboardLayout   keyboardLayout
	Laptap           laptap
	LaptapGpu        laptapGpu
	LaptapStorage    laptapStorage
	Memory           memory
	MemoryUnit       memoryUnit
	Role             role
	Screen           screen
	ScreenPanel      screenPanel
	ScreenResolution screenResolution
	Storage          storage
	StorageDriver    storageDriver
	User             user
	Weight           weight
	WeightUnit       weightUnit
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		CPU:              q.CPU.clone(db),
		Gpu:              q.Gpu.clone(db),
		Keyboard:         q.Keyboard.clone(db),
		KeyboardLayout:   q.KeyboardLayout.clone(db),
		Laptap:           q.Laptap.clone(db),
		LaptapGpu:        q.LaptapGpu.clone(db),
		LaptapStorage:    q.LaptapStorage.clone(db),
		Memory:           q.Memory.clone(db),
		MemoryUnit:       q.MemoryUnit.clone(db),
		Role:             q.Role.clone(db),
		Screen:           q.Screen.clone(db),
		ScreenPanel:      q.ScreenPanel.clone(db),
		ScreenResolution: q.ScreenResolution.clone(db),
		Storage:          q.Storage.clone(db),
		StorageDriver:    q.StorageDriver.clone(db),
		User:             q.User.clone(db),
		Weight:           q.Weight.clone(db),
		WeightUnit:       q.WeightUnit.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		CPU:              q.CPU.replaceDB(db),
		Gpu:              q.Gpu.replaceDB(db),
		Keyboard:         q.Keyboard.replaceDB(db),
		KeyboardLayout:   q.KeyboardLayout.replaceDB(db),
		Laptap:           q.Laptap.replaceDB(db),
		LaptapGpu:        q.LaptapGpu.replaceDB(db),
		LaptapStorage:    q.LaptapStorage.replaceDB(db),
		Memory:           q.Memory.replaceDB(db),
		MemoryUnit:       q.MemoryUnit.replaceDB(db),
		Role:             q.Role.replaceDB(db),
		Screen:           q.Screen.replaceDB(db),
		ScreenPanel:      q.ScreenPanel.replaceDB(db),
		ScreenResolution: q.ScreenResolution.replaceDB(db),
		Storage:          q.Storage.replaceDB(db),
		StorageDriver:    q.StorageDriver.replaceDB(db),
		User:             q.User.replaceDB(db),
		Weight:           q.Weight.replaceDB(db),
		WeightUnit:       q.WeightUnit.replaceDB(db),
	}
}

type queryCtx struct {
	CPU              *cPUDo
	Gpu              *gpuDo
	Keyboard         *keyboardDo
	KeyboardLayout   *keyboardLayoutDo
	Laptap           *laptapDo
	LaptapGpu        *laptapGpuDo
	LaptapStorage    *laptapStorageDo
	Memory           *memoryDo
	MemoryUnit       *memoryUnitDo
	Role             *roleDo
	Screen           *screenDo
	ScreenPanel      *screenPanelDo
	ScreenResolution *screenResolutionDo
	Storage          *storageDo
	StorageDriver    *storageDriverDo
	User             *userDo
	Weight           *weightDo
	WeightUnit       *weightUnitDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		CPU:              q.CPU.WithContext(ctx),
		Gpu:              q.Gpu.WithContext(ctx),
		Keyboard:         q.Keyboard.WithContext(ctx),
		KeyboardLayout:   q.KeyboardLayout.WithContext(ctx),
		Laptap:           q.Laptap.WithContext(ctx),
		LaptapGpu:        q.LaptapGpu.WithContext(ctx),
		LaptapStorage:    q.LaptapStorage.WithContext(ctx),
		Memory:           q.Memory.WithContext(ctx),
		MemoryUnit:       q.MemoryUnit.WithContext(ctx),
		Role:             q.Role.WithContext(ctx),
		Screen:           q.Screen.WithContext(ctx),
		ScreenPanel:      q.ScreenPanel.WithContext(ctx),
		ScreenResolution: q.ScreenResolution.WithContext(ctx),
		Storage:          q.Storage.WithContext(ctx),
		StorageDriver:    q.StorageDriver.WithContext(ctx),
		User:             q.User.WithContext(ctx),
		Weight:           q.Weight.WithContext(ctx),
		WeightUnit:       q.WeightUnit.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	return &QueryTx{q.clone(q.db.Begin(opts...))}
}

type QueryTx struct{ *Query }

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
